package app.randomuser.tabsquare.vo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAIL_DATA".
*/
public class UserDetailDataDao extends AbstractDao<UserDetailData, Long> {

    public static final String TABLENAME = "USER_DETAIL_DATA";

    /**
     * Properties of entity UserDetailData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, Long.class, "userid", true, "_id");
        public final static Property Md5 = new Property(1, String.class, "md5", false, "MD5");
        public final static Property Page = new Property(2, String.class, "page", false, "PAGE");
        public final static Property Data = new Property(3, String.class, "data", false, "DATA");
        public final static Property LastUpdated = new Property(4, Long.class, "lastUpdated", false, "LAST_UPDATED");
    }


    public UserDetailDataDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAIL_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userid
                "\"MD5\" TEXT," + // 1: md5
                "\"PAGE\" TEXT," + // 2: page
                "\"DATA\" TEXT," + // 3: data
                "\"LAST_UPDATED\" INTEGER);"); // 4: lastUpdated
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_DETAIL_DATA__id ON \"USER_DETAIL_DATA\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAIL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDetailData entity) {
        stmt.clearBindings();
 
        Long userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(1, userid);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(2, md5);
        }
 
        String page = entity.getPage();
        if (page != null) {
            stmt.bindString(3, page);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }
 
        Long lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(5, lastUpdated);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDetailData entity) {
        stmt.clearBindings();
 
        Long userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(1, userid);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(2, md5);
        }
 
        String page = entity.getPage();
        if (page != null) {
            stmt.bindString(3, page);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }
 
        Long lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(5, lastUpdated);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDetailData readEntity(Cursor cursor, int offset) {
        UserDetailData entity = new UserDetailData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // md5
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // page
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // data
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // lastUpdated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDetailData entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMd5(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastUpdated(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDetailData entity, long rowId) {
        entity.setUserid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDetailData entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDetailData entity) {
        return entity.getUserid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
